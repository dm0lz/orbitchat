import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
// import { fetchOrbitItems, addOrbitItem, removeOrbitItem } from "./todoAPI";

const initialState = {
  username: "",
  aavePrice: 200,
  ethPrice: 2000,
  btcPrice: 30000,
};

// export const fetchItems = createAsyncThunk("todo/fetchItems", async (orbit) => {
//   const response = await fetchOrbitItems(orbit);
//   return response;
// });

export const cryptoSlice = createSlice({
  name: "crypto",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    newTicker: (state, action) => {
      switch (action.payload.product_id) {
        case "BTC-USD":
          state.btcPrice = action.payload.price;
          break;
        case "ETH-USD":
          state.ethPrice = action.payload.price;
          break;
        case "AAVE-USD":
          state.aavePrice = action.payload.price;
          break;
        default:
          console.log(action.payload);
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(fetchItems.pending, (state) => {
  //       state.status = "loading";
  //     })
  //     .addCase(fetchItems.fulfilled, (state, action) => {
  //       state.status = "idle";
  //       state.items = action.payload;
  //     });
  // },
});

export const { newTicker } = cryptoSlice.actions;

// export const userSelector = (state) => state.home.username;

export default cryptoSlice.reducer;
